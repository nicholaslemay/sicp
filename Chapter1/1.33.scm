(define true #t)
(define false #f)
(define (identity x) x )
(define (inc x) (+ x 1))

(define (display-on-single-line . args)
   (map display args)
   (display "\n")
) 

(define (prime? number)
  (define (greatest_divider_of_number last_try)
    (if (= (mod number (- last_try 1)) 0) 
        (- last_try 1)
        (greatest_divider_of_number (- last_try 1))
    )
  )
  
  (cond ((<= number 1) false)
        ((<= number 3) true)
        ((= (mod number 2) 0) false)
        (else (=  1 (greatest_divider_of_number number)))
  ) 
)

(define (filtered-accumulate predicate combiner null-value term a next b )
  (define (filtered-accumulate-rest-of-list)
    (filtered-accumulate predicate combiner null-value term (next a) next b)
  )
  (define (combine-with-result-of-rest-of-list n)
    (combiner n (filtered-accumulate-rest-of-list))
  )
  (cond ( (> a b ) null-value)
        ( (predicate a)  (combine-with-result-of-rest-of-list a))
        (else (combine-with-result-of-rest-of-list null-value))
  ) 
)

(define (sum-prime-integers a b)
  (filtered-accumulate prime? + 0 identity a inc b)   
)

(define (product-prime-integers-less-than n)
    (filtered-accumulate prime? * 1 identity 1 inc (- n 1))   
)

(display-on-single-line (sum-prime-integers 0 10))
(display-on-single-line (product-prime-integers-less-than 11))
